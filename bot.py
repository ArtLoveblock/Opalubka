# -*- coding: utf-8 -*-
import os
import logging
import sys
import types
from threading import Thread
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# –§–∏–∫—Å –¥–ª—è Python 3.13+
sys.modules['imghdr'] = types.ModuleType('imghdr')
sys.modules['imghdr'].what = lambda x: None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_CHAT_ID = "5559554783"
PING_INTERVAL = 300
WEBHOOK_SECRET = "qwErTy1234567890poiUytRewq"  # –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(STONE_WIDTH, STRUCTURE_LENGTH, STRUCTURE_HEIGHT, FINAL_CALCULATION, CONTACT_INFO) = range(5)

# –î–∞–Ω–Ω—ã–µ –æ –∫–∞–º–Ω—è—Ö
stone_data = {
    '20': {'width': 0.20, 'volume': 0.016, 'price': 190, 'work_price': 300},
    '30': {'width': 0.30, 'volume': 0.024, 'price': 205, 'work_price': 300},
    '40': {'width': 0.40, 'volume': 0.032, 'price': 240, 'work_price': 300}
}

def ping_server(app_name):
    """–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    while True:
        try:
            requests.get(f"https://{app_name}.onrender.com", timeout=10)
            logger.info("–ü–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        finally:
            import time
            time.sleep(PING_INTERVAL)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    context.user_data.clear()
    
    keyboard = [
        [InlineKeyboardButton("20 —Å–º", callback_data='20')],
        [InlineKeyboardButton("30 —Å–º", callback_data='30')],
        [InlineKeyboardButton("40 —Å–º", callback_data='40')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        'üî® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤\n'
        '–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: 60 —Å–º (–¥–ª–∏–Ω–∞) √ó 20 —Å–º (–≤—ã—Å–æ—Ç–∞)\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫–∞–º–Ω—è:',
        reply_markup=reply_markup
    )
    return STONE_WIDTH

async def stone_width(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã –∫–∞–º–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['stone_width'] = query.data
    await query.edit_message_text(text=f"‚úÖ –®–∏—Ä–∏–Ω–∞ –∫–∞–º–Ω—è: {query.data} —Å–º")
    await query.message.reply_text('üìè –í–≤–µ–¥–∏—Ç–µ –î–õ–ò–ù–£ —Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –ú–ï–¢–†–ê–•:')
    return STRUCTURE_LENGTH

async def structure_length(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–µ–Ω–∏—è"""
    try:
        length = float(update.message.text.replace(',', '.'))
        if length <= 0:
            raise ValueError
        context.user_data['structure_length'] = length
        await update.message.reply_text('üìê –í–≤–µ–¥–∏—Ç–µ –í–´–°–û–¢–£ —Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –ú–ï–¢–†–ê–•:')
        return STRUCTURE_HEIGHT
    except ValueError:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.2):')
        return STRUCTURE_LENGTH

async def structure_height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–†–∞—Å—á–µ—Ç –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        height = float(update.message.text.replace(',', '.'))
        if height <= 0:
            raise ValueError
            
        stone = stone_data[context.user_data['stone_width']]
        length_m = context.user_data['structure_length']
        height_m = height
        
        # –†–∞—Å—á–µ—Ç—ã
        block_length = 0.60
        block_height = 0.20
        blocks_per_row = length_m / block_length
        rows = height_m / block_height
        total_blocks = blocks_per_row * rows
        formwork_cost = total_blocks * stone['price']
        work_cost = total_blocks * stone['work_price']
        rebar_rows = int((rows + 1) // 2)
        rebar_length = length_m * 2
        total_rebar = rebar_rows * rebar_length
        
        context.user_data['calculation'] = {
            'width': stone['width']*100,
            'length': length_m,
            'height': height_m,
            'blocks': total_blocks,
            'concrete': total_blocks * stone['volume'],
            'formwork_cost': formwork_cost,
            'work_cost': work_cost,
            'rebar': total_rebar
        }
        
        result = (
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n"
            f"‚ñ™ –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: 60x20 —Å–º\n"
            f"‚ñ™ –®–∏—Ä–∏–Ω–∞ –∫–ª–∞–¥–∫–∏: {stone['width']*100:.0f} —Å–º\n"
            f"‚ñ™ –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–µ–Ω–∏—è: {length_m:.2f} –º\n"
            f"‚ñ™ –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–µ–Ω–∏—è: {height_m:.2f} –º\n\n"
            f"üß± –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤: {total_blocks:.1f} —à—Ç\n"
            f"üèóÔ∏è –û–±—ä–µ–º –±–µ—Ç–æ–Ω–∞: {total_blocks * stone['volume']:.3f} –º¬≥\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–∞–ª—É–±–∫–∏: {formwork_cost:.2f} ‚ÇΩ\n"
            f"üë∑ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã: {work_cost:.2f} ‚ÇΩ\n"
            f"üî© –ê—Ä–º–∞—Ç—É—Ä–∞: {total_rebar:.1f} –º\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìû –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='consult')],
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data='restart')]
        ]
        await update.message.reply_text(
            result,
            reply_markup=InlineKeyboardMarkup(keyboard))
        return FINAL_CALCULATION
        
    except ValueError:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):')
        return STRUCTURE_HEIGHT
        
async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
    try:
        # 1. –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
        context.user_data.clear()
        
        # 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if 'conversation' in context.chat_data:
            del context.chat_data['conversation']
        
        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='restart')],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='close')]
        ]
        await update.message.reply_text(
            "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup(keyboard)
            
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Clear error: {str(e)}")
        await update.message.reply_text("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        return await start(update, context)  # –ê–≤–∞—Ä–∏–π–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫

async def final_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'consult':
        await query.edit_message_text(text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:\n(–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω +79123456789)")
        return CONTACT_INFO
    elif query.data == 'restart':
        context.user_data.clear()
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text="üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç! –ù–∞–∂–º–∏—Ç–µ /start"
        )
        return ConversationHandler.END

async def contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_data = update.message.text
    calculation = context.user_data.get('calculation', {})
    
    application = (
        "üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_data}\n"
        f"üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"- –®–∏—Ä–∏–Ω–∞: {calculation.get('width', 0)} —Å–º\n"
        f"- –î–ª–∏–Ω–∞: {calculation.get('length', 0)} –º\n"
        f"- –í—ã—Å–æ—Ç–∞: {calculation.get('height', 0)} –º\n"
        f"üßÆ –†–∞—Å—á–µ—Ç:\n"
        f"- –ë–ª–æ–∫–∏: {calculation.get('blocks', 0):.1f} —à—Ç\n"
        f"- –ë–µ—Ç–æ–Ω: {calculation.get('concrete', 0):.3f} –º¬≥\n"
        f"- –ê—Ä–º–∞—Ç—É—Ä–∞: {calculation.get('rebar', 0):.1f} –º\n"
        f"üí∏ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {calculation.get('formwork_cost', 0) + calculation.get('work_cost', 0):.2f} ‚ÇΩ"
    )
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=application
    )
    
    logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {application}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text('‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start')
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)
    if update and update.message:
        try:
            await update.message.reply_text('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start')
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

async def post_init(application: Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    await application.bot.set_webhook(
        url=f"https://{os.getenv('RENDER_APP_NAME')}.onrender.com/{application.bot.token}",
        secret_token=WEBHOOK_SECRET,
        allowed_updates=Update.ALL_TYPES
    )
    logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = os.environ.get('TELEGRAM_TOKEN')
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder() \
        .token(TOKEN) \
        .post_init(post_init) \
        .read_timeout(60) \
        .write_timeout(60) \
        .connect_timeout(30) \
        .pool_timeout(60) \
        .get_updates_read_timeout(60) \
        .build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            STONE_WIDTH: [CallbackQueryHandler(stone_width)],
            STRUCTURE_LENGTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, structure_length)],
            STRUCTURE_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, structure_height)],
            FINAL_CALCULATION: [CallbackQueryHandler(final_calculation)],
            CONTACT_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_info)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("clear", clear_history))
    application.add_handler(CallbackQueryHandler(clear_history, pattern="^restart$"))

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("ping", lambda u,c: u.message.reply_text("üèì Pong!")))
    application.add_handler(CommandHandler("webhook_info", 
        lambda u,c: c.bot.get_webhook_info().then(
            lambda info: u.message.reply_text(f"Webhook info:\n{info}"))))

    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if os.getenv('RENDER'):
        PORT = int(os.environ.get('PORT', 8443))
        app_name = os.getenv('RENDER_APP_NAME', 'opalubka')
        
        logger.info(f"–ó–∞–ø—É—Å–∫ webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–∏–Ω–≥–∞
        Thread(target=ping_server, args=(app_name,), daemon=True).start()
        
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=f"https://{app_name}.onrender.com",
            secret_token=WEBHOOK_SECRET,
            cert=None,
            drop_pending_updates=True
        )
    else:
        application.run_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")

if __name__ == '__main__':
    main()
