def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = os.environ.get('7736990857:AAHEocRVYal13QDxM-HFaQA8b7llWJC_z6g')  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        logger.error("1. –ü–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
        logger.error("2. –ß—Ç–æ –æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render")
        logger.error("3. –ß—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞–ø–∏—Å–∞–Ω–æ —Ç–æ—á–Ω–æ")
        sys.exit(1)# –§–∏–∫—Å –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π –≤ Python 3.13
import sys
import types
sys.modules['imghdr'] = types.ModuleType('imghdr')
sys.modules['imghdr'].what = lambda x: None

import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
    CallbackContext,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(STONE_WIDTH, STRUCTURE_LENGTH, 
 STRUCTURE_HEIGHT, FINAL_CALCULATION, 
 CONTACT_INFO) = range(5)

# –î–∞–Ω–Ω—ã–µ –æ –∫–∞–º–Ω—è—Ö (–≤ –º–µ—Ç—Ä–∞—Ö)
stone_data = {
    '20': {'width': 0.20, 'volume': 0.016, 'price': 190, 'work_price': 300},
    '30': {'width': 0.30, 'volume': 0.024, 'price': 205, 'work_price': 300},
    '40': {'width': 0.40, 'volume': 0.032, 'price': 240, 'work_price': 300}
}

def start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    context.user_data.clear()
    
    keyboard = [
        [InlineKeyboardButton("20 —Å–º", callback_data='20')],
        [InlineKeyboardButton("30 —Å–º", callback_data='30')],
        [InlineKeyboardButton("40 —Å–º", callback_data='40')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        'üî® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤\n'
        '–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: 60 —Å–º (–¥–ª–∏–Ω–∞) √ó 20 —Å–º (–≤—ã—Å–æ—Ç–∞)\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫–∞–º–Ω—è:',
        reply_markup=reply_markup
    )
    return STONE_WIDTH

def stone_width(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã –∫–∞–º–Ω—è"""
    query = update.callback_query
    query.answer()
    
    context.user_data['stone_width'] = query.data
    query.edit_message_text(text=f"‚úÖ –®–∏—Ä–∏–Ω–∞ –∫–∞–º–Ω—è: {query.data} —Å–º")
    query.message.reply_text('üìè –í–≤–µ–¥–∏—Ç–µ –î–õ–ò–ù–£ —Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –ú–ï–¢–†–ê–•:')
    return STRUCTURE_LENGTH

def structure_length(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–µ–Ω–∏—è"""
    try:
        length = float(update.message.text.replace(',', '.'))
        if length <= 0:
            raise ValueError
        context.user_data['structure_length'] = length
        update.message.reply_text('üìê –í–≤–µ–¥–∏—Ç–µ –í–´–°–û–¢–£ —Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –ú–ï–¢–†–ê–•:')
        return STRUCTURE_HEIGHT
    except ValueError:
        update.message.reply_text('‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.2):')
        return STRUCTURE_LENGTH

def structure_height(update: Update, context: CallbackContext) -> int:
    """–†–∞—Å—á–µ—Ç –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        height = float(update.message.text.replace(',', '.'))
        if height <= 0:
            raise ValueError
            
        stone = stone_data[context.user_data['stone_width']]
        length_m = context.user_data['structure_length']
        height_m = height
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞ (60x20 —Å–º)
        block_length = 0.60  # 60 —Å–º
        block_height = 0.20   # 20 —Å–º
        
        # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤
        blocks_per_row = length_m / block_length
        rows = height_m / block_height
        total_blocks = blocks_per_row * rows
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–∞–ª—É–±–∫–∏
        formwork_cost = total_blocks * stone['price']
        work_cost = total_blocks * stone['work_price']
        
        # –†–∞—Å—á–µ—Ç –∞—Ä–º–∞—Ç—É—Ä—ã (—á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π —Ä—è–¥)
        rebar_rows = int((rows + 1) // 2)  # –ö–∞–∂–¥—ã–π –Ω–µ—á–µ—Ç–Ω—ã–π —Ä—è–¥
        rebar_length = length_m * 2  # –î–≤–µ –∞—Ä–º–∞—Ç—É—Ä—ã –Ω–∞ —Ä—è–¥
        total_rebar = rebar_rows * rebar_length
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = (
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n"
            f"‚ñ™ –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: 60x20 —Å–º\n"
            f"‚ñ™ –®–∏—Ä–∏–Ω–∞ –∫–ª–∞–¥–∫–∏: {stone['width']*100:.0f} —Å–º\n"
            f"‚ñ™ –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–µ–Ω–∏—è: {length_m:.2f} –º\n"
            f"‚ñ™ –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–µ–Ω–∏—è: {height_m:.2f} –º\n\n"
            f"üß± –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤: {total_blocks:.1f} —à—Ç\n"
            f"üèóÔ∏è –û–±—ä–µ–º –±–µ—Ç–æ–Ω–∞: {total_blocks * stone['volume']:.3f} –º¬≥\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–∞–ª—É–±–∫–∏: {formwork_cost:.2f} ‚ÇΩ\n"
            f"üë∑ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã: {work_cost:.2f} ‚ÇΩ\n"
            f"üî© –ê—Ä–º–∞—Ç—É—Ä–∞: {total_rebar:.1f} –º\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='consult')],
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data='restart')]
        ]
        update.message.reply_text(
            result,
            reply_markup=InlineKeyboardMarkup(keyboard))
        return FINAL_CALCULATION
        
    except ValueError:
        update.message.reply_text('‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):')
        return STRUCTURE_HEIGHT

def final_calculation(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    if query.data == 'consult':
        query.edit_message_text(text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω:\n(–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω +79123456789)")
        return CONTACT_INFO
    elif query.data == 'restart':
        context.user_data.clear()
        context.bot.send_message(
            chat_id=query.message.chat.id,
            text="üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç! –ù–∞–∂–º–∏—Ç–µ /start"
        )
        return ConversationHandler.END

def contact_info(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {update.message.text}\n{context.user_data}")
    update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.\n"
        "–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    update.message.reply_text('‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start')
    return ConversationHandler.END

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        update.message.reply_text('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = os.getenv('7736990857:AAHEocRVYal13QDxM-HFaQA8b7llWJC_z6g')
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
        sys.exit(1)
    
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            STONE_WIDTH: [CallbackQueryHandler(stone_width)],
            STRUCTURE_LENGTH: [MessageHandler(Filters.text & ~Filters.command, structure_length)],
            STRUCTURE_HEIGHT: [MessageHandler(Filters.text & ~Filters.command, structure_height)],
            FINAL_CALCULATION: [CallbackQueryHandler(final_calculation)],
            CONTACT_INFO: [MessageHandler(Filters.text & ~Filters.command, contact_info)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    dispatcher.add_handler(conv_handler)
    dispatcher.add_error_handler(error_handler)

    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if os.getenv('RENDER'):
        # Webhook –¥–ª—è Render
        PORT = int(os.environ.get('PORT', 8443))
        app_name = os.getenv('RENDER_APP_NAME', 'your-app-name')
        webhook_url = f"https://{app_name}.onrender.com/{TOKEN}"
        
        updater.start_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=webhook_url
        )
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ: {webhook_url}")
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π polling
        updater.start_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ")

    updater.idle()

if __name__ == '__main__':
    main()
